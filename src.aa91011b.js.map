{"version":3,"sources":["js/task-01.js","js/task-02.js","js/task-03.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAAA,IAAMA,EAAQ,SAAAC,GACH,OAAA,IAAIC,QAAQ,SAACC,GAChBC,WAAW,WACPD,EAAQF,IACTA,MAILI,EAAS,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,QAEnBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;AC0CjB,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAtDA,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACxB,OAAA,IAAIb,QAAQ,SAACC,GAIhBA,EAHqBW,EAASE,IAAI,SAAAC,GAC9BA,OAAAA,EAAKN,OAASI,EAAgBE,EAAAA,EAAAA,GAAAA,GAA9B,GAAA,CAAoCL,QAASK,EAAKL,SAAWK,QAMnEZ,EAAS,SAAAa,GAAgBX,OAAAA,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACnBnC,IAAMe,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAACC,GACf3B,IAAAA,EAAQoB,EAA0B,IAAK,KAEtC,OAAA,IAAIlB,QAAQ,SAACC,EAASyB,GAEzBxB,WAAW,WACYmB,KAAKE,SAAW,IAE/BtB,EAAQ,CAAE0B,GAAIF,EAAYE,GAAIvB,KAAMN,IAExC4B,EAAOD,EAAYE,KACpB7B,MAIL8B,EAAa,SAAkB,GAAfD,IAAAA,EAAAA,EAAAA,GAAIvB,EAAAA,EAAAA,KACxBC,QAAQC,IAAmBqB,eAAAA,OAAAA,EAAmBvB,kBAAAA,OAAAA,EAA9C,QAGIyB,EAAW,SAAAF,GACftB,QAAQyB,KAAqCH,gCAAAA,OAAAA,EAA7C,+BAGFH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH;;ACtCT,aAHA,QAAA,oBACA,QAAA,mBACA,QAAA,mBACA,QAAA","file":"src.aa91011b.js","sourceRoot":"..\\src","sourcesContent":["const delay = ms => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(ms);\r\n        }, ms)\r\n    })\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n\r\n\r\n\r\n// Задание 1\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\n\r\n// const delay = ms => {\r\n//   // Твой код\r\n// };\r\n\r\n// const logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// // Вызовы функции для проверки\r\n// delay(2000).then(logger); // Resolved after 2000ms\r\n// delay(1000).then(logger); // Resolved after 1000ms\r\n// delay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve) => {\r\n        const updatedUsers = allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n        )\r\n        resolve(updatedUsers);\r\n    })\r\n}\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n\r\n\r\n\r\n// Задание 2\r\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\n// const users = [\r\n//   { name: 'Mango', active: true },\r\n//   { name: 'Poly', active: false },\r\n//   { name: 'Ajax', active: true },\r\n//   { name: 'Lux', active: false },\r\n// ];\r\n\r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n//   const updatedUsers = allUsers.map(user =>\r\n//     user.name === userName ? { ...user, active: !user.active } : user,\r\n//   );\r\n\r\n//   callback(updatedUsers);\r\n// };\r\n\r\n// const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n// /*\r\n//  * Сейчас работает так\r\n//  */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\n// /*\r\n//  * Должно работать так\r\n//  */\r\n// toggleUserState(users, 'Mango').then(logger);\r\n// toggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n            if (canProcess) {\r\n                resolve({ id: transaction.id, time: delay });\r\n            } \r\n            reject(transaction.id);\r\n        }, delay);\r\n    })\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n  \r\n\r\n\r\n\r\n\r\n//   Задание 3\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\r\n\r\n// const randomIntegerFromInterval = (min, max) => {\r\n//   return Math.floor(Math.random() * (max - min + 1) + min);\r\n// };\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\n// const logSuccess = (id, time) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n// /*\r\n//  * Работает так\r\n//  */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n// /*\r\n//  * Должно работать так\r\n//  */\r\n// makeTransaction({ id: 70, amount: 150 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 71, amount: 230 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 72, amount: 75 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n// makeTransaction({ id: 73, amount: 100 })\r\n//   .then(logSuccess)\r\n//   .catch(logError);\r\n\r\n","import \"./css/styles.css\";\r\nimport './js/task-01.js';\r\nimport './js/task-02.js';\r\nimport './js/task-03.js';"]}